{-
This is a dependent case statement. Depending on the value of the
input, the output could be either a Nat or a Unit.

When we apply the function to the argument Succ Zero, we know it must
return a Nat, so we can apply Succ on the result.
-}

(Succ
 ((lambda (x Nat)
    (case x (lambda (y Nat) (case y (lambda (y Nat) (Type 0)) ((Zero) Unit) ((Succ n) Nat)))
          ((Zero) MkUnit)
          ((Succ n) n)))
  (Succ Zero)))
